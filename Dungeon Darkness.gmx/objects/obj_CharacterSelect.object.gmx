<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
startcount = getControlNum();
startcount = global.howManyPlayers;


player[0] = 0;
player[1] = 0;
player[2] = 0;
player[3] = 0;

playerDone[0] = false;
playerDone[1] = false;
playerDone[2] = false;
playerDone[3] = false;

playersDone = 0;

xpos = 64;

background_xscale[0] = 2;
background_yscale[0] = 2;

view_wview[0] = view_hview[0]*global.screenRatio;
view_wport[0] = global.screenHeight*global.screenRatio;
view_hport[0] = global.screenHeight;

origin = (view_wview[0]/2)-((startcount/2)*80);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(xpos &gt; 0.5){
    xpos = xpos / 1.1;
} else {
    xpos = 0;
}

playersDone = 0;

if(!global.usingKeyboard){
    for(i = 0; i &lt; global.howManyPlayers; i++){
        if(gamepad_button_check_pressed(i,global.cUp[i])){
            if(global.p[i] &gt; 0){
                global.p[i] -= 1;
            } else {
                global.p[i] = 3;
            }
            if(global.sfx) audio_play_sound(snd_Select,10,false);
        }
        if(gamepad_button_check_pressed(i,global.cDown[i])){
            if(global.p[i] &lt; 3){
                global.p[i] += 1;
            } else {
                global.p[i] = 0;
            }
            if(global.sfx) audio_play_sound(snd_Select,10,false);
        }
        if(gamepad_button_check_pressed(i,global.cJump[i])){
            if(playerDone[i] == false){
                playerDone[i] = true;
            }
        }
        if(playerDone[i]){
            playersDone++;
        }
        if(gamepad_button_check_pressed(i,global.cCancel[i])){
            if(playerDone[i] == true){
                playerDone[i] = false;
            } else if(playersDone == 0) {
                room_goto(rm_ChoosePlayers);
            }
        }
    }
} else {
    for(i = 0; i &lt; 2; i++){
        if(keyboard_check_pressed(global.ckUp[i])){
            if(global.p[i] &gt; 0){
                global.p[i] -= 1;
            } else {
                global.p[i] = 3;
            }
            if(global.sfx) audio_play_sound(snd_Select,10,false);
        }
        if(keyboard_check_pressed(global.ckDown[i])){
            if(global.p[i] &lt; 3){
                global.p[i] += 1;
            } else {
                global.p[i] = 0;
            }
            if(global.sfx) audio_play_sound(snd_Select,10,false);
        }
        if(keyboard_check_pressed(global.ckFire[i])){
            if(playerDone[i] == false){
                playerDone[i] = true;
            }
        }
        if(playerDone[i]){
            playersDone++;
        }
        if(keyboard_check_pressed(global.ckCancel[i])){
            if(playerDone[i] == true){
                playerDone[i] = false;
            } else if(playersDone == 0) {
                room_goto(rm_Menu);
            }
        }
    }
}
if(playersDone == global.howManyPlayers){
    room_goto(rm_MapSelect);
}

background_x[0] = 240-((xpos)/3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1-(xpos/64));
draw_set_color(c_white);
draw_set_font(fnt_Large);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_text_transformed((view_wview[0]/2)-(xpos*2.5),4,"Pick a character",2,2,0);

for(i = 0; i &lt; startcount; i++){
    //draw_set_alpha(0.4);
    //draw_rectangle(origin+(i*80),48,origin+(i*80)+80,room_height,false);
    draw_set_alpha(1-(xpos/64));
    draw_text(origin+(i*80)+40-xpos,56,"P" + string(i+1));
    draw_sprite_ext(global.c[global.p[i]],0,origin+(i*80)+40-xpos,120,4,4,0,-1,1-(xpos/64));
    draw_sprite_ext(spr_CharacterSelectUp,0,origin+(i*80)+40-xpos,90,4+(gamepad_button_check(i,global.cUp[i])/2),4+(gamepad_button_check(i,global.cUp[i])/2),0,-1,1-(xpos/64));
    draw_sprite_ext(spr_CharacterSelectUp,0,origin+(i*80)+40-xpos,180,4+(gamepad_button_check(i,global.cDown[i])/2),-(4+(gamepad_button_check(i,global.cDown[i])/2)),0,-1,1-(xpos/64));
    if(playerDone[i] == true){
        draw_text(origin+(i*80)+40-xpos,196,"Done!");
    }
    if(global.gp[i] == false &amp;&amp; global.usingKeyboard == false){
        draw_set_alpha(0.4*(1-(xpos/64)));
        draw_set_color(c_black);
        draw_rectangle(origin+(i*80)-xpos,48,origin+(i*80)+80-xpos,room_height-16,false);
        draw_set_alpha(1-(xpos/64));
        draw_set_color(c_white);
        draw_text_ext_transformed(origin+(i*80)+40-xpos,120,"Please connect a gamepad!",16,80,0.8,0.8,0);
    }
}
draw_set_alpha(1);
draw_set_font(fnt_Main);
draw_set_valign(fa_bottom);
draw_text_transformed(view_wview[0]/2,room_height-4,"[Up/Down] Change Character  [Action] Confirm Character#[Cancel] De-confirm character / Go back",1,1,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
