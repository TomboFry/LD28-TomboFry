<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.cLeft[0] = gp_padl;
global.cRight[0] = gp_padr;
global.cUp[0] = gp_padu;
global.cDown[0] = gp_padd;
global.cJump[0] = gp_face1;
global.cCancel[0] = gp_face2;
global.cFire[0] = gp_shoulderr;
global.cPause[0] = gp_start;

global.cLeft[1] = gp_padl;
global.cRight[1] = gp_padr;
global.cUp[1] = gp_padu;
global.cDown[1] = gp_padd;
global.cJump[1] = gp_face1;
global.cCancel[1] = gp_face2;
global.cFire[1] = gp_shoulderr;
global.cPause[1] = gp_start;

global.cLeft[2] = gp_padl;
global.cRight[2] = gp_padr;
global.cUp[2] = gp_padu;
global.cDown[2] = gp_padd;
global.cJump[2] = gp_face1;
global.cCancel[2] = gp_face2;
global.cFire[2] = gp_shoulderr;
global.cPause[2] = gp_start;

global.cLeft[3] = gp_padl;
global.cRight[3] = gp_padr;
global.cUp[3] = gp_padu;
global.cDown[3] = gp_padd;
global.cJump[3] = gp_face1;
global.cCancel[3] = gp_face2;
global.cFire[3] = gp_shoulderr;
global.cPause[3] = gp_start;

global.gp[0] = false;
global.gp[1] = false;
global.gp[2] = false;
global.gp[3] = false;

global.p[0] = 0;
global.p[1] = 0;
global.p[2] = 0;
global.p[3] = 0;

global.howManyPlayers = 2;

global.usingKeyboard = false;

global.ckUp[0] = ord('W');
global.ckDown[0] = ord('S');
global.ckLeft[0] = ord('A');
global.ckRight[0] = ord('D');
global.ckFire[0] = ord('Q');
global.ckCancel[0] = ord('E');

global.ckUp[1] = vk_up;
global.ckDown[1] = vk_down;
global.ckLeft[1] = vk_left;
global.ckRight[1] = vk_right;
global.ckFire[1] = vk_rcontrol;
global.ckCancel[1] = vk_delete;

global.ckUp[2] = vk_up;
global.ckDown[2] = vk_down;
global.ckLeft[2] = vk_left;
global.ckRight[2] = vk_right;
global.ckFire[2] = vk_rcontrol;
global.ckCancel[2] = vk_delete;


global.c[0] = spr_PlayerA;
global.cD[0] = spr_PlayerADead;

global.c[1] = spr_PlayerB;
global.cD[1] = spr_PlayerBDead;

global.c[2] = spr_PlayerC;
global.cD[2] = spr_PlayerCDead;

global.c[3] = spr_PlayerD;
global.cD[3] = spr_PlayerDDead;

/* ROUNDS &amp; WINNERS */

global.roundNum = 0;
global.rounds[0] = 0;
global.rounds[1] = 0;
global.rounds[2] = 0;

/* MUSIC &amp; SFX */

global.music = true;
global.sfx = true;

global.lastplayerpressed = 0; // Index of the player who last pressed a key

/* PAUSE MENU */
global.isPaused = false;
select = 0;
text[0] = "Resume";
text[1] = "Go to main menu";
text[2] = "Quit Game";

/* Debug stuff 
global.debug = false;
debugstring = "";*/

/* replays */
global.isReplay = false;
global.gameStarted = false;
global.gameEnded = false;
global.replayStep = 0;
global.replayWait = 0;
global.replayStarted = false;

/* Screen resizing */
global.screenHeight = 240;
global.screenScale = 1;
global.screenRatio = display_get_width() / display_get_height();
if(global.screenRatio &gt; 2){
    global.screenRatio = 2;
}
if(global.screenRatio &lt; 1){
    global.screenRatio = 1;
}

// This will overwrite any previously written settings if the config file exists
loadSettings();

if(!window_get_fullscreen()){
    window_set_size(global.screenHeight*global.screenRatio*global.screenScale,global.screenHeight*global.screenScale);
} else {
    window_set_size(display_get_width(),display_get_height());
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(vk_f4)){
    window_set_fullscreen(!window_get_fullscreen());
    if(!window_get_fullscreen()){
        window_set_size(global.screenHeight*global.screenRatio*global.screenScale,global.screenHeight*global.screenScale);
    } else {
        window_set_size(display_get_width(),display_get_height());
    }
}
//if(keyboard_check_pressed(vk_f3)){
//    global.debug = !global.debug;
//}
//if(global.debug){
//    debugstring = "gui: " + string(display_get_gui_width()) + "x" + string(display_get_gui_height()) + "#";
//    for(i = 0; i &lt; 4; i++){
//        if(view_visible[i]){
//            debugstring += "port " + string(i+1) + ": " + string(view_wport[0]) + "x" + string(view_hport[0]) + "#" +
//                           "view " + string(i+1) + ": " + string(view_wview[0]) + "x" + string(view_hview[0]) + "#";
//        }
//    }
//    debugstring += "window: " + string(window_get_width()) + "x" + string(window_get_height()) + "#" +
//                   "fps: " + string(fps) + "#" +
//                   "scale: " + string(global.screenScale);
//}
display_set_gui_size(240*global.screenRatio,240);
if(!global.usingKeyboard){
    count = getControlNum();
    for(i = 0; i &lt; count; i ++){
        if(gamepad_button_check_pressed(i,global.cPause[i])){
            global.isPaused = !global.isPaused;
        }
    }
    if(global.isPaused){
        instance_deactivate_all(true);
        for(i = 0; i &lt; count; i ++){
            if(gamepad_button_check_pressed(i,global.cUp[i])){
                if(select &gt; 0){
                    select--;
                } else {
                    select = 2;
                }
            }
            if(gamepad_button_check_pressed(i,global.cDown[i])){
                if(select &lt; 2){
                    select++;
                } else {
                    select = 0;
                }
            }
            if(gamepad_button_check_pressed(i,global.cJump[i])){
                if(select == 0){
                    global.isPaused = false;
                } else if(select == 1){
                    global.roundNum = 0;
                    global.rounds[0] = 0;
                    global.rounds[1] = 0;
                    global.rounds[2] = 0;
                    global.isPaused = false;
                    room_goto(rm_Menu);
                } else if(select== 2){
                    instance_create(x,y,obj_GameEnd);
                    global.isPaused = false;
                }
            }
        }
    } else {
        instance_activate_all();
    }
} else {
    if(keyboard_check_pressed(vk_escape)){
        global.isPaused = !global.isPaused;
    }
    if(global.isPaused){
        instance_deactivate_all(true);
        for(i = 0; i &lt; 2; i ++){
            if(keyboard_check_pressed(global.ckUp[i])){
                if(select &gt; 0){
                    select--;
                } else {
                    select = 2;
                }
            }
            if(keyboard_check_pressed(global.ckDown[i])){
                if(select &lt; 2){
                    select++;
                } else {
                    select = 0;
                }
            }
            if(keyboard_check_pressed(global.ckFire[i])){
                if(select == 0){
                    global.isPaused = false;
                } else if(select == 1){
                    global.roundNum = 0;
                    global.rounds[0] = 0;
                    global.rounds[1] = 0;
                    global.rounds[2] = 0;
                    global.isPaused = false;
                    room_goto(rm_Menu);
                } else if(select== 2){
                    instance_create(x,y,obj_GameEnd);
                    global.isPaused = false;
                }
            }
        }
    } else {
        instance_activate_all();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.music){
    if(room == rm_Menu || room == rm_Options || room == rm_KeyConfig){
        if(!audio_is_playing(mus_MainMenu)){
            audio_stop_all();
            //audio_play_sound(mus_MainMenu);
            audio_play_sound(mus_MainMenu,10,true);
        }
    } else if(room == rm_CharacterSelect || room == rm_ChoosePlayers || room == rm_MapSelect){
        if(!audio_is_playing(mus_OtherMenu)){
            audio_stop_all();
            audio_play_sound(mus_OtherMenu,10,true);
        }
    } else if(room == rm_Level1){
        if(!audio_is_playing(mus_Map1)){
            audio_stop_all();
            audio_play_sound(mus_Map1,10,true);
        }
    } else if(room == rm_Level2 || room == rm_Level3){
        if(!audio_is_playing(mus_Map2)){
            audio_stop_all();
            audio_play_sound(mus_Map2,10,true);
        }
    } else if(room == rm_Champion){
        if(!audio_is_playing(mus_Winner)){
            audio_stop_all();
            audio_play_sound(mus_Winner,10,false);
        }
    }
} else {
    audio_stop_all();
}

if(room == rm_Level1 || room == rm_Level2 || room == rm_Level3){
    /* replays */
    global.isReplay = false;
    global.gameStarted = false;
    global.gameEnded = false;
    global.replayStep = 0;
    global.replayWait = 0;
    global.replayStarted = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>saveSettings();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(global.isPaused){
    draw_set_alpha(0.75);
    draw_set_color(c_black);
    draw_rectangle(0,0,240*global.screenRatio,240,false);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_font(fnt_Large);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text_transformed(display_get_gui_width()/2,16,"PAUSED",2,2,0);
    for(j = 0; j &lt; 3; j++){
        if(j == select){
            dtext = "&gt; " + text[j] + " &lt;";
        } else {
            dtext = text[j];
        }
        draw_text((240*global.screenRatio)/2,60+(j*26),dtext);
    }
}
/*
if(global.debug){
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_font(fnt_Main);
    draw_set_halign(fa_right);
    draw_set_valign(fa_top);
    draw_text(display_get_gui_width(),0,debugstring);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
