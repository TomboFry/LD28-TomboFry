<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>step = 0;
key = -1;
stringkey = "";

/* Keys:
   0 = Up
   1 = Down
   2 = Left
   3 = Right
   4 = Jump
   5 = Shoot
   6 = Back
*/

pressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(key != -1){
    if(key == 0){
        stringkey = "Up";
    } else if(key == 1){
        stringkey = "Down";
    } else if(key == 2){
        stringkey = "Left";
    } else if(key == 3){
        stringkey = "Right";
    } else if(key == 4){
        stringkey = "Action/Jump";
    } else if(key == 5){
        stringkey = "Shoot";
    } else if(key == 6){
        stringkey = "Back/Cancel";
    }
    if(step == 0){
        if(pressed == 0){
            if(gamepad_button_check_pressed(global.lastplayerpressed,gp_padd)){
                pressed = gp_padd;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_padu)){
                pressed = gp_padu;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_padl)){
                pressed = gp_padl;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_padr)){
                pressed = gp_padr;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_axislh)){
                pressed = gp_axislh;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_axislv)){
                pressed = gp_axislv;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_axisrh)){
                pressed = gp_axisrh;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_axisrv)){
                pressed = gp_axisrv;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_face1)){
                pressed = gp_face1;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_face2)){
                pressed = gp_face2;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_face3)){
                pressed = gp_face3;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_face4)){
                pressed = gp_face4;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_select)){
                pressed = gp_select;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_shoulderl)){
                pressed = gp_shoulderl;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_shoulderlb)){
                pressed = gp_shoulderlb;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_shoulderr)){
                pressed = gp_shoulderr;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_shoulderrb)){
                pressed = gp_shoulderrb;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_start)){
                pressed = gp_start;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_stickl)){
                pressed = gp_stickl;
            } else if(gamepad_button_check_pressed(global.lastplayerpressed,gp_stickr)){
                pressed = gp_stickr;
            }
        } else {
            step = 1;
        }
    } else if(step == 1){
        if(gamepad_button_check_pressed(global.lastplayerpressed,global.cJump[global.lastplayerpressed])){
            step = 2;
        } else if(gamepad_button_check_pressed(global.lastplayerpressed,global.cCancel[global.lastplayerpressed])){
            pressed = 0;
            step = 0;
        }
    } else if(step == 2){
        
        if(key == 0){
            global.cUp[global.lastplayerpressed] = pressed;
        } else if(key == 1){
            global.cDown[global.lastplayerpressed] = pressed;
        } else if(key == 2){
            global.cLeft[global.lastplayerpressed] = pressed;
        } else if(key == 3){
            global.cRight[global.lastplayerpressed] = pressed;
        } else if(key == 4){
            global.cJump[global.lastplayerpressed] = pressed;
        } else if(key == 5){
            global.cFire[global.lastplayerpressed] = pressed;
        } else if(key == 6){
            global.cCancel[global.lastplayerpressed] = pressed;
        }
        
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_font(fnt_Large);

draw_text_transformed(room_width/2,8,stringkey,2,2,0);
draw_text(room_width/2,48,"Press a key to set " + stringkey);

if(step == 1){
    draw_set_valign(fa_middle);
    draw_text_transformed(room_width/2,room_height/2,getKey(pressed),1.5,1.5,0);
    draw_set_valign(fa_bottom);
    draw_text_transformed(room_width/2,room_height-4,"To confirm press [Action] ("+getKey(global.cJump[global.lastplayerpressed]) + ")#or to enter a different key press [Cancel] ("+getKey(global.cCancel[global.lastplayerpressed])+")",0.6,0.6,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
