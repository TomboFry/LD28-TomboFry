<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rm_Level1){
    pax = 96; pay = 136;
    pbx = 232; pby = 136;
    pcx = 96; pcy = 80;
    pdx = 232; pdy = 80;
} else if(room == rm_Level2){
    pax = 96; pay = 192;
    pbx = 304; pby = 192;
    pcx = 80; pcy = 112;
    pdx = 320; pdy = 112;
} else if(room == rm_Level3){
    pax = 80; pay = 192;
    pbx = 224; pby = 192;
    pcx = 112; pcy = 136;
    pdx = 192; pdy = 136;
}

pa = instance_create(pax,pay,obj_Player);
pb = instance_create(pbx,pby,obj_Player);
pc = instance_create(pcx,pcy,obj_Player);
pd = instance_create(pdx,pdy,obj_Player);

pa.sprite_index = global.c[global.p[0]];
pb.sprite_index = global.c[global.p[1]];
pc.sprite_index = global.c[global.p[2]];
pd.sprite_index = global.c[global.p[3]];

pa.view = 0;
pb.view = 1;
pc.view = 2;
pd.view = 3;

instance_deactivate_object(pa);
instance_deactivate_object(pb);
instance_deactivate_object(pc);
instance_deactivate_object(pd);

count = 0;
step = 0;

pAlive = 0;
lastman = 0;

gamestarted = false;
gsCount = 0;
secs = 3;
gameended = false;
geCount = 0;
canExit = false;
display_set_gui_size(320, 240);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var gp_num = gamepad_get_device_count();
count = getControlNum();
count = global.howManyPlayers;
if(count == 0){
    if(step &lt; room_speed*4){
        step += 1;
    } else {
        game_end();
    }
} else if(count == 1){
    view_visible[0] = true;
    view_visible[1] = false;
    view_visible[2] = false;
    view_visible[3] = false;
    view_wview[0] = 160;
    view_hview[0] = 120;
    view_wport[0] = 640;
    view_hport[0] = 480;
    view_xport[0] = 0;
    view_yport[0] = 0;
    view_hborder[0] = 80;
    view_vborder[0] = 60;
    instance_activate_object(pa);
    instance_deactivate_object(pb);
    instance_deactivate_object(pc);
    instance_deactivate_object(pd);
    step = 0;
} else if(count == 2){
    view_visible[0] = true;
    view_visible[1] = true;
    view_visible[2] = false;
    view_visible[3] = false;
    
    view_wview[0] = 160;
    view_hview[0] = 60;
    view_wport[0] = 640;
    view_hport[0] = 240;
    view_xport[0] = 0;
    view_yport[0] = 0;
    view_hborder[0] = 80;
    view_vborder[0] = 30;
    
    view_wview[1] = 160;
    view_hview[1] = 60;
    view_wport[1] = 640;
    view_hport[1] = 240;
    view_xport[1] = 0;
    view_yport[1] = 240;
    view_hborder[1] = 80;
    view_vborder[1] = 30;
    instance_activate_object(pa);
    instance_activate_object(pb);
    instance_deactivate_object(pc);
    instance_deactivate_object(pd);
    step = 0;
} else if(count == 3){
    view_visible[0] = true;
    view_visible[1] = true;
    view_visible[2] = true;
    view_visible[3] = false;
    
    view_wview[0] = 80;
    view_hview[0] = 60;
    view_wport[0] = 320;
    view_hport[0] = 240;
    view_xport[0] = 0;
    view_yport[0] = 0;
    view_hborder[0] = view_wview[0]/2;
    view_vborder[0] = view_hview[0]/2;
    
    view_wview[1] = 80;
    view_hview[1] = 60;
    view_wport[1] = 320;
    view_hport[1] = 240;
    view_xport[1] = 320;
    view_yport[1] = 0;
    view_hborder[1] = view_wview[1]/2;
    view_vborder[1] = view_hview[1]/2;
    
    view_wview[2] = 80;
    view_hview[2] = 60;
    view_wport[2] = 320;
    view_hport[2] = 240;
    view_xport[2] = 0;
    view_yport[2] = 240;
    view_hborder[2] = view_wview[2]/2;
    view_vborder[2] = view_hview[2]/2;
    instance_activate_object(pa);
    instance_activate_object(pb);
    instance_activate_object(pc);
    instance_deactivate_object(pd);
    step = 0;
} else if(count == 4){
    view_visible[0] = true;
    view_visible[1] = true;
    view_visible[2] = true;
    view_visible[3] = true;
    
    view_wview[0] = 80;
    view_hview[0] = 60;
    view_wport[0] = 320;
    view_hport[0] = 240;
    view_xport[0] = 0;
    view_yport[0] = 0;
    view_hborder[0] = view_wview[0]/2;
    view_vborder[0] = view_hview[0]/2;
    
    view_wview[1] = 80;
    view_hview[1] = 60;
    view_wport[1] = 320;
    view_hport[1] = 240;
    view_xport[1] = 320;
    view_yport[1] = 0;
    view_hborder[1] = view_wview[1]/2;
    view_vborder[1] = view_hview[1]/2;
    
    view_wview[2] = 80;
    view_hview[2] = 60;
    view_wport[2] = 320;
    view_hport[2] = 240;
    view_xport[2] = 0;
    view_yport[2] = 240;
    view_hborder[2] = view_wview[2]/2;
    view_vborder[2] = view_hview[2]/2;
    
    view_wview[3] = 80;
    view_hview[3] = 60;
    view_wport[3] = 320;
    view_hport[3] = 240;
    view_xport[3] = 320;
    view_yport[3] = 240;
    view_hborder[3] = view_wview[3]/2;
    view_vborder[3] = view_hview[3]/2;
    
    instance_activate_object(pa);
    instance_activate_object(pb);
    instance_activate_object(pc);
    instance_activate_object(pd);
    step = 0;
    
}

if(!gamestarted){
    if(global.roundNum &gt; 0){
        gamestarted = true;
    }
    if(gsCount &lt; room_speed * 3){
        gsCount++;
    } else {
        gsCount = 0;
        gamestarted = true;
    }
    if((180-gsCount) mod 60 == 0){
        secs -= 1;
    }
} else {
    pAlive = count;
    with(obj_Player){
        if(dead){
            obj_cRoom.pAlive--;
        } else {
            obj_cRoom.lastman = view;
        }
    }
    if(pAlive == 1){
        gameended = true;
    }
}
if(gameended){
    if(geCount &lt; room_speed){
        geCount++;
    } else {
        geCount = room_speed;
        canExit = true;
    }
}
if(canExit){
    for(j = 0; j &lt; count; j++){
        if(gamepad_button_check_pressed(j,global.cJump[j]) || keyboard_check_pressed(global.ckFire[j])){
            global.rounds[global.roundNum] = lastman;
            if(global.roundNum &lt; 2){
                global.roundNum++;
                room_restart();
            } else {
                room_goto(rm_Champion);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!gamestarted){
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_rectangle(0,0,320,240,false);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_font(fnt_Large);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_transformed(160,120,string(secs),4/((((180-gsCount) mod 60)+1)/4),4/((((180-gsCount) mod 60)+1)/4),0);
    draw_text_transformed(160,192,"You only live once",0.8,0.8,0); // YOLO SWAG UP IN THIS BITCH
}

if(gameended){
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_rectangle(0,0,320,240,false);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_font(fnt_Large);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    scale = (geCount/60)*2;
    // (1/(((60-geCount)+1)/8))/8
    draw_text_transformed(160,100,"Player " + string(lastman+1),scale,scale,0);
    draw_text_transformed(160,140,"Wins round " + string(global.roundNum+1) + "/3",scale,scale,0);
    draw_sprite_ext(spr_RoundComplete,global.roundNum,160,200,2,2,0,-1,geCount/60);
    if(geCount == room_speed){
        draw_set_font(fnt_Main);
        draw_set_halign(fa_right);
        draw_set_valign(fa_bottom);
        draw_text(316,236,"Press [Action]");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
